//NSE Programmering 101
/*
Disse er comments. Jeres compiler, i dette tilfælde CodeBlocks, vil ignorere alt hvad i skriver her.
En comment kan starte med //, så er det kun den linje som bliver ignoreret, eller /*, så er det alle linjer indtil i skriver */

/*
Jeg vil sørge for, at i kan kopiere denne tekst direkte over i jeres compiler, bare for tests.
Jeg vil prøve at opdatere den med beskrivelser og eksempler senest 24 timer efter hver "lektion", men jeg lover intet da jeg er doven... -.-

ANYWAYS! GUIDES N SHIT!

Nyt projekt:
Åbn CodeBlocks
tryk i højre hjørne på File - New - Project
Vælg Console Application, da det er dem vi arbejder med.
Sørg for at vælge c++ som sprog og GNU GCC som compiler. (ja, jeg sagde at CodeBlocks er jeres compiler. Det er ikke helt rigtigt, men jeg vil ikke gå i detaljer her.)

For at skifte mellem projekter:
I højre side ser i jeres projekt markeret med tyk skrift. Dobbeltklik på andre projekter for at gøre dem til det aktive projekt.
I toppen af jeres text editor vil i se alle åbne filer. Normalt kun main.cpp, men hvis i åbner flere projekter, kan i skifte mellem dem der.

Variabler:
int. en 32bit integer. Den skrives således:
int x; dette hedder en declaration. Her siger vi "DER ER EN TING VED NAVN x SOM FINDES! DEN ER ET TAL!"
eller
int x = 0;
hvor int er typen, x er navnet og 0 er værdien. I kan også sige x = y, hvis y allerede findes.
I kan senere ændre værdien af x som i vil. Bare skriv
x = 1;  dette hedder en definition. Her siger vi "x ER LIG MED 1!"
eller endda
x = x + 1;
dette er ikke den bedste måde at øge tallet med 1, men mere om det senere...
note: I må aldrig declare en variabel flere gange. F.eks. må i ikke:
int x;
int x = 5;
dette vil give en fejl. Programmet ved godt selv nu at x er en int.

char. Kan have både tal og tegn som værdi. De betyder det samme.
I kan skrive
char y = 1;
for at give char værdien af det første tegn i ascII table
eller:
char y = 'y';
i kan også skrive at det er lig andre variabler. f.eks
y = x;
hvis x er lig 1, er y lig 1 også.

bool. Kan være true eller false.
bool myBool = false;

string. En række chars. Tænk på en string som et stykke tekst.
string myString = "my string!";

Konsollen:
for at få konsollen til at skrive noget:
cout << "din tekst her";
for at få den til at skrive en ny linje, skriv
cout << endl;
for at skrive flere ting på samme linje, skriv
cout << "din text her" << endl;
du kan også indsætte variabler
cout << x << endl;

for at kunne skrive noget i konsollen og lægge det i en variablel, skriv:
int z;
int a;
cin >> z;
Du kan også skrive
cin >> z >> a;
For at lægge input i flere variabler. Dette vil betyde at alt før mellemrum lægges i z, og alt efter lægges i a.

cout står for console output, cin står for console input

Flow control:
Flow control er at styre programmet. Dette er f.eks loops og switches.

If/else
Dette vil kunne få programmet til at gøre én ting hvis noget er sandt, og noget andet hvis det er falsk.
Skrives således:

if(statement. F.eks. myBool == false){
    //gør ting
}
else //hvis myBool ikke er false
{
    //gør noget andet
}

{} hedder en block. Det er svært at forklare hvordan i ved hvornår i skal bruge dem. Bare husk at if/else/while og funktion definitions/classes og namespaces generelt bruger dem. Ikke tænk over hvad halvdelen af de ord betyder, vi kommer til det.

switch(myChar) //enten en int eller char. I dette tilfælde bruger vi igen myChar
{
case 'x': //hvis char er lig med tegnet x
    //gør ting
    break; //break brydder ud af blocken. I dette tilfælde betyder det at programmet er færdig med switchen.

case 'y': //hvis det ikke er x men i stedet y
    //gør andre ting
    break;

default: //hvis ingen af case passer
    //gør noget tredje

*/

#include <iostream>

using namespace std;

int main() {
	char x = 'i' //variabel x har værdien i
	cout << x << endl; //skriver x og går ned på en ny linje. skulle bare vise tegnet i
	x = 48; //x har nu værdien af element nummer 48 på ascII table: tegnet 0

	int y; //vi siger at der findes en ting ved navn y
	y = 49; //og y har værdien 49
	cout << y << endl;
	cin >> y; //du kan nu skrive en værdi til y

	return 0;
}
